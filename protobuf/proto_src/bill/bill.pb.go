// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto_src/bill.proto

package bill

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ApiRequestEvent struct {
	AppId      uint32 `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	RequestId  string `protobuf:"bytes,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	CreateTime uint64 `protobuf:"varint,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Types that are valid to be assigned to TestOneof:
	//	*ApiRequestEvent_Name
	//	*ApiRequestEvent_Id
	TestOneof            isApiRequestEvent_TestOneof `protobuf_oneof:"test_oneof"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *ApiRequestEvent) Reset()         { *m = ApiRequestEvent{} }
func (m *ApiRequestEvent) String() string { return proto.CompactTextString(m) }
func (*ApiRequestEvent) ProtoMessage()    {}
func (*ApiRequestEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_41df3e4840ffde42, []int{0}
}
func (m *ApiRequestEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApiRequestEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApiRequestEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApiRequestEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApiRequestEvent.Merge(m, src)
}
func (m *ApiRequestEvent) XXX_Size() int {
	return m.Size()
}
func (m *ApiRequestEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_ApiRequestEvent.DiscardUnknown(m)
}

var xxx_messageInfo_ApiRequestEvent proto.InternalMessageInfo

type isApiRequestEvent_TestOneof interface {
	isApiRequestEvent_TestOneof()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ApiRequestEvent_Name struct {
	Name string `protobuf:"bytes,4,opt,name=name,proto3,oneof" json:"name,omitempty"`
}
type ApiRequestEvent_Id struct {
	Id uint32 `protobuf:"varint,5,opt,name=id,proto3,oneof" json:"id,omitempty"`
}

func (*ApiRequestEvent_Name) isApiRequestEvent_TestOneof() {}
func (*ApiRequestEvent_Id) isApiRequestEvent_TestOneof()   {}

func (m *ApiRequestEvent) GetTestOneof() isApiRequestEvent_TestOneof {
	if m != nil {
		return m.TestOneof
	}
	return nil
}

func (m *ApiRequestEvent) GetAppId() uint32 {
	if m != nil {
		return m.AppId
	}
	return 0
}

func (m *ApiRequestEvent) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func (m *ApiRequestEvent) GetCreateTime() uint64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *ApiRequestEvent) GetName() string {
	if x, ok := m.GetTestOneof().(*ApiRequestEvent_Name); ok {
		return x.Name
	}
	return ""
}

func (m *ApiRequestEvent) GetId() uint32 {
	if x, ok := m.GetTestOneof().(*ApiRequestEvent_Id); ok {
		return x.Id
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ApiRequestEvent) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ApiRequestEvent_Name)(nil),
		(*ApiRequestEvent_Id)(nil),
	}
}

func init() {
	proto.RegisterType((*ApiRequestEvent)(nil), "bill.ApiRequestEvent")
}

func init() { proto.RegisterFile("proto_src/bill.proto", fileDescriptor_41df3e4840ffde42) }

var fileDescriptor_41df3e4840ffde42 = []byte{
	// 211 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x29, 0x28, 0xca, 0x2f,
	0xc9, 0x8f, 0x2f, 0x2e, 0x4a, 0xd6, 0x4f, 0xca, 0xcc, 0xc9, 0xd1, 0x03, 0x73, 0x85, 0x58, 0x40,
	0x6c, 0xa5, 0x79, 0x8c, 0x5c, 0xfc, 0x8e, 0x05, 0x99, 0x41, 0xa9, 0x85, 0xa5, 0xa9, 0xc5, 0x25,
	0xae, 0x65, 0xa9, 0x79, 0x25, 0x42, 0xa2, 0x5c, 0x6c, 0x89, 0x05, 0x05, 0xf1, 0x99, 0x29, 0x12,
	0x8c, 0x0a, 0x8c, 0x1a, 0xbc, 0x41, 0xac, 0x89, 0x05, 0x05, 0x9e, 0x29, 0x42, 0xb2, 0x5c, 0x5c,
	0x45, 0x10, 0x65, 0x20, 0x29, 0x26, 0x05, 0x46, 0x0d, 0xce, 0x20, 0x4e, 0xa8, 0x88, 0x67, 0x8a,
	0x90, 0x3c, 0x17, 0x77, 0x72, 0x51, 0x6a, 0x62, 0x49, 0x6a, 0x7c, 0x49, 0x66, 0x6e, 0xaa, 0x04,
	0xb3, 0x02, 0xa3, 0x06, 0x4b, 0x10, 0x17, 0x44, 0x28, 0x24, 0x33, 0x37, 0x55, 0x48, 0x84, 0x8b,
	0x25, 0x2f, 0x31, 0x37, 0x55, 0x82, 0x05, 0xa4, 0xd3, 0x83, 0x21, 0x08, 0xcc, 0x13, 0x12, 0xe0,
	0x62, 0xca, 0x4c, 0x91, 0x60, 0x05, 0x59, 0xe4, 0xc1, 0x10, 0xc4, 0x94, 0x99, 0xe2, 0xc4, 0xc3,
	0xc5, 0x55, 0x02, 0xb2, 0x24, 0x3f, 0x2f, 0x35, 0x3f, 0xcd, 0x49, 0xe1, 0xc4, 0x23, 0x39, 0xc6,
	0x0b, 0x8f, 0xe4, 0x18, 0x1f, 0x3c, 0x92, 0x63, 0x9c, 0xf1, 0x58, 0x8e, 0x21, 0x8a, 0x0f, 0xd5,
	0x3b, 0x49, 0x6c, 0x60, 0xbe, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x15, 0x9a, 0xe8, 0xb8, 0xe7,
	0x00, 0x00, 0x00,
}

func (m *ApiRequestEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApiRequestEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApiRequestEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TestOneof != nil {
		{
			size := m.TestOneof.Size()
			i -= size
			if _, err := m.TestOneof.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.CreateTime != 0 {
		i = encodeVarintBill(dAtA, i, uint64(m.CreateTime))
		i--
		dAtA[i] = 0x18
	}
	if len(m.RequestId) > 0 {
		i -= len(m.RequestId)
		copy(dAtA[i:], m.RequestId)
		i = encodeVarintBill(dAtA, i, uint64(len(m.RequestId)))
		i--
		dAtA[i] = 0x12
	}
	if m.AppId != 0 {
		i = encodeVarintBill(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ApiRequestEvent_Name) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApiRequestEvent_Name) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintBill(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0x22
	return len(dAtA) - i, nil
}
func (m *ApiRequestEvent_Id) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApiRequestEvent_Id) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintBill(dAtA, i, uint64(m.Id))
	i--
	dAtA[i] = 0x28
	return len(dAtA) - i, nil
}
func encodeVarintBill(dAtA []byte, offset int, v uint64) int {
	offset -= sovBill(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ApiRequestEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovBill(uint64(m.AppId))
	}
	l = len(m.RequestId)
	if l > 0 {
		n += 1 + l + sovBill(uint64(l))
	}
	if m.CreateTime != 0 {
		n += 1 + sovBill(uint64(m.CreateTime))
	}
	if m.TestOneof != nil {
		n += m.TestOneof.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ApiRequestEvent_Name) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovBill(uint64(l))
	return n
}
func (m *ApiRequestEvent_Id) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovBill(uint64(m.Id))
	return n
}

func sovBill(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBill(x uint64) (n int) {
	return sovBill(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ApiRequestEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBill
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApiRequestEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApiRequestEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBill
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBill
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			m.CreateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBill
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBill
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TestOneof = &ApiRequestEvent_Name{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TestOneof = &ApiRequestEvent_Id{v}
		default:
			iNdEx = preIndex
			skippy, err := skipBill(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBill
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBill(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBill
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBill
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBill
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBill
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBill
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBill
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBill        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBill          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBill = fmt.Errorf("proto: unexpected end of group")
)
